AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: python3.12
    Layers:
      - !Ref CommonLayer

Resources:
  # API Gateway HTTP APIの作成
  FakeThesisHttpApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: "FakeThesisHttpApiGateway" # APIの名前
      ProtocolType: "HTTP"

  # ApiGateway用 IAM Roleの作成
  ApiGatewayInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com" # API Gatewayがこのロールを引き受ける
            Action: "sts:AssumeRole"

  # API Gatewayのルート（エンドポイント）の作成
  ApiGatewayRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref FakeThesisHttpApiGateway # 作成したAPI GatewayのIDを参照
      RouteKey: "GET /example" # HTTPメソッドとエンドポイント
      Target: !Sub "integrations/${ApiGatewayStepFunctionsIntegration}" # Stepfunctions統合ターゲットを指定

  # API GatewayとStep Functionsを統合するための統合リソース
  ApiGatewayStepFunctionsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref
      IntegrationType: "AWS_PROXY" # LambdaまたはStep Functionsを直接呼び出す統合タイプ
      # IntegrationUri: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${MyStepFunctionsStateMachine}"  # Step FunctionsのARNを指定
      PayloadFormatVersion: "2.0"

  # 共通Lambda Layer
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: fake_thesis_common_layer
      Description: Common utilities and validators and etc
      ContentUri: layers/common/
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12
      RetentionPolicy: Delete

  # 論文フォーマット取得関数
  GetFakeThesisTitleCategoryFormat:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get_fake_thesis_title_category_format
      CodeUri: functions/get_fake_thesis_title_category_format/
      Handler: app.lambda_handler
      Description: "" #関数の説明
      MemorySize: 256 # メモリサイズ (MB)
      Timeout: 900 # タイムアウト(秒)
      Role: !GetAtt LambdaExecutionRole.Arn # IAMロールの指定
      Layers:
        - arn:aws:lambda:ap-northeast-1:770693421928:layer:Klayers-p312-requests:8 #Klayers のrequests
        - arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV2:77 #AWS公式 LambdaPowertools
        - arn:aws:lambda:ap-northeast-1:336392948345:layer:AWSSDKPandas-Python312:13 #AWS公式 Pandas
      Environment:
        Variables:
          DYNAMO_DB_TABLE: value
  
  # フォーマットからプロンプトを生成する関数
  GeneratePromptParameters:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: generate_prompt_parameters
      CodeUri: functions/generate_prompt_parameters/
      Handler: app.lambda_handler
      Description: "" #関数の説明
      MemorySize: 512 # メモリサイズ (MB)
      Timeout: 900 # タイムアウト(秒)
      Role: !GetAtt LambdaExecutionRole.Arn # IAMロールの指定
      Layers:
        - arn:aws:lambda:ap-northeast-1:770693421928:layer:Klayers-p312-requests:8 #Klayers のrequests
        - arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV2:77 #AWS公式 LambdaPowertools
      Environment:
        Variables:
          DYNAMO_DB_TABLE: value

  # 生成AI APIリクエスト関数
  RequestGenerativeAiModelApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: request_generative_ai_model_api
      CodeUri: functions/request_generative_ai_model_api/
      Handler: app.lambda_handler
      Description: "" #関数の説明
      MemorySize: 512 # メモリサイズ (MB)
      Timeout: 900 # タイムアウト(秒)
      Role: !GetAtt LambdaExecutionRole.Arn # IAMロールの指定
      Layers:
        - arn:aws:lambda:ap-northeast-1:770693421928:layer:Klayers-p312-requests:8 #Klayers のrequests
        - arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV2:77 #AWS公式 LambdaPowertools
      Environment:
        Variables:
          ANTHROPIC_API_URL: value
          ANTHROPIC_API_KEY: value
          ANTHROPIC_API_MODEL: value


  # グラフデータの作成
  GenerateFakeGraph:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: generate_fake_graph
      CodeUri: functions/generate_fake_graph/
      Handler: app.lambda_handler
      Description: "" #関数の説明
      MemorySize: 1024 # メモリサイズ (MB)
      Timeout: 900 # タイムアウト(秒)
      Role: !GetAtt LambdaExecutionRole.Arn # IAMロールの指定
      Layers:
        - arn:aws:lambda:ap-northeast-1:770693421928:layer:Klayers-p312-numpy:8 #Klayers numpy
        - arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV2:77 #AWS公式 LambdaPowertools
      Environment:
        Variables:
          S3_BUCKET: value
  
  # 表データの作成
  GenerateFakeTable:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: generate_fake_table
      CodeUri: functions/generate_fake_table/
      Handler: app.lambda_handler
      Description: "" #関数の説明
      MemorySize: 1024 # メモリサイズ (MB)
      Timeout: 900 # タイムアウト(秒)
      Role: !GetAtt LambdaExecutionRole.Arn # IAMロールの指定
      Layers:
        - arn:aws:lambda:ap-northeast-1:770693421928:layer:Klayers-p312-numpy:8 #Klayers numpy
        - arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV2:77 #AWS公式 LambdaPowertools
      Environment:
        Variables:
          S3_BUCKET: value

  # 数式データの作成
  GenerateFakeFormula:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: generate_fake_formula
      CodeUri: functions/generate_fake_formula/
      Handler: app.lambda_handler
      Description: "" #関数の説明
      MemorySize: 512 # メモリサイズ (MB)
      Timeout: 900 # タイムアウト(秒)
      Role: !GetAtt LambdaExecutionRole.Arn # IAMロールの指定
      Layers:
        - arn:aws:lambda:ap-northeast-1:770693421928:layer:Klayers-p312-numpy:8 #Klayers numpy
        - arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV2:77 #AWS公式 LambdaPowertools
      Environment:
        Variables:
          S3_BUCKET: value
  
  # PDFに変換する関数
  ConvertToPdf:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: convert_to_pdf
      CodeUri: functions/convert_to_pdf/
      Handler: app.lambda_handler
      Description: "" #関数の説明
      MemorySize: 256 # メモリサイズ (MB)
      Timeout: 900 # タイムアウト(秒)
      Role: !GetAtt LambdaExecutionRole.Arn # IAMロールの指定
      Layers:
        # - arn:aws:lambda:ap-northeast-1:770693421928:layer:Klayers-p312-Pillow:4 #Klayer Pillow
        # - arn:aws:lambda:ap-northeast-1:770693421928:layer:Klayers-p311-reportlab:6 #Klayer reportlab
        - arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV2:77 #AWS公式 LambdaPowertools
      Environment:
        Variables:
          S3_BUCKET: value
    
  # 論文データの整形
  Test:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: test
      CodeUri: functions/test/
      Handler: app.lambda_handler
      Description: "" #関数の説明
      MemorySize: 1024 # メモリサイズ (MB)
      Timeout: 900 # タイムアウト(秒)
      Role: !GetAtt LambdaExecutionRole.Arn # IAMロールの指定
      Layers:
        # - arn:aws:lambda:ap-northeast-1:770693421928:layer:Klayers-p312-Pillow:4 #Klayer Pillow
        # - arn:aws:lambda:ap-northeast-1:770693421928:layer:Klayers-p311-reportlab:6 #Klayer reportlab
        - arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV2:77 #AWS公式 LambdaPowertools
      Environment:
        Variables:
          S3_BUCKET: value


  #Lambdaで使用するIAMロールの作成
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: fake_thesis_lambda_role # 明示的にロール名を指定
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${FakeThesisBucket}  
                  - !Sub arn:aws:s3:::${FakeThesisBucket}/*  

              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  # - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/master_thesis_category_format_table"
                  # - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/workflow_progress_management_table"
                  # - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/master_thesis_category_format_table/*"
                  # - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/workflow_progress_management_table/*"
                  - !GetAtt MasterFakeThesisCategoryFormatsTable.Arn
                  - !GetAtt WorkflowProgressManagementTable.Arn

              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: "arn:aws:sqs:*:*:*"

  # 論文フォーマットマスターテーブル
  MasterFakeThesisCategoryFormatsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: master_fake_thesis_category_formats_table
      AttributeDefinitions:
        - AttributeName: category_type_en
          AttributeType: S
        - AttributeName: category_type_jp
          AttributeType: S
      KeySchema:
        - AttributeName: category_type_en
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: "category_title_jp_index_gsi"
          KeySchema:
            - AttributeName: "category_type_jp"
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      BillingMode: PROVISIONED
      # BillingMode: PAY_PER_REQUEST
      # OnDemandThroughput:
      #    MaxReadRequestUnits: 1000
      #    MaxWriteRequestUnits: 1000
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      DeletionProtectionEnabled: true
      SSESpecification:
        SSEEnabled: true
    DeletionPolicy: Retain

  # ワークフロー進捗管理テーブル
  WorkflowProgressManagementTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: workflow_progress_management_table
      AttributeDefinitions:
        - AttributeName: workflow_id
          AttributeType: S
        - AttributeName: task_id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: workflow_id
          KeyType: HASH
        - AttributeName: task_id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: "status_index_gsi"
          KeySchema:
            - AttributeName: "status"
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      BillingMode: PROVISIONED
      # BillingMode: PAY_PER_REQUEST
      # OnDemandThroughput:
      #   MaxReadRequestUnits: 1000
      #   MaxWriteRequestUnits: 1000
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      DeletionProtectionEnabled: true
      SSESpecification:
        SSEEnabled: true
    DeletionPolicy: Retain

  # S3 バケット
  FakeThesisBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "fake-thesis-bucket"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: "Suspended" # バージョニングなし設定
    DeletionPolicy: Retain # バケットを削除せず保持
    UpdateReplacePolicy: Retain