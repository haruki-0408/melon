AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: python3.12
    Layers:
      - !Ref CommonLayer

Resources:
  # 共通Lambda Layer
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: melon-common-layer
      Description: Common utilities and validators and etc
      ContentUri: layers/common/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain
    Tags:
      - Key: "project"
        Value: "melon"
      
  # 偽論文タイトルからカテゴライズする関数
  FakeThesisTitleClassifier:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fake_thesis_title_classifier
      CodeUri: functions/fake_thesis_title_classifier/
      Handler: app.lambda_handler
      Description: "Categorizing fake thesis using Amazon Translate and Comprehend" #関数の説明
      MemorySize: 256  # メモリサイズ (MB)
      Timeout: 900  # タイムアウト(秒)
      Role: !GetAtt LambdaExecutionRole.Arn  # IAMロールの指定
      Layers:
       - arn:aws:lambda:ap-northeast-1:770693421928:layer:Klayers-p312-requests:8 #Klayers のrequests
       - arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV2:77 #AWS公式 LambdaPowertools
       - arn:aws:lambda:ap-northeast-1:336392948345:layer:AWSSDKPandas-Python312:13 #AWS公式 Pandas
      Environment:
        Variables:
    Tags:
      - Key: "project"
        Value: "melon"
  
  #Lambdaで使用するIAMロールの作成
  LambdaExecutionRole: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: melon_lambda_role  # 明示的にロール名を指定
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - "arn:aws:s3:::jeldam-raw/*"
                  - "arn:aws:s3:::jeldam-format/*"

              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - "arn:aws:s3:::jeldam-origin/*"
                  - "arn:aws:s3:::jeldam-public"
                  - "arn:aws:s3:::jeldam-public/*"

              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/datastore_hyg6dt2jeube_app_table"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/datastore_hyg6dt2jeube_get_raw_data_error_logs_table"

              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: "arn:aws:sqs:*:*:*"